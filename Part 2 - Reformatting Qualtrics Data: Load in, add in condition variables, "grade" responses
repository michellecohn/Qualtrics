################################################################################################
#
# Reformatting Qualtrics Data, Part 2
#
# Load in,add in condition variables, "grade" responses
#
# MC 10/12/19
#
################################################################################################


# 1) Pulll in the dataset 
cd = "/Volumes/experiment/"
setwd(cd)
ratings_dat_discrimin_long = read.csv("ratings_data_long.csv",header = TRUE)


# Define current version of file (e.g., if there are 2 versions of the experiment)
current_experiment_version = "B"

# 2) Define new column names 
ratings_dat_discrimin_long["ExperimentVersion"] = current_experiment_version
ratings_dat_discrimin_long["Subject"] = ratings_dat_discrimin_long$Response.ID
ratings_dat_discrimin_long["Condition"] = NA
ratings_dat_discrimin_long["ConditionID"] = NA
ratings_dat_discrimin_long["Speaker"] = NA
ratings_dat_discrimin_long["Cond"] = NA
ratings_dat_discrimin_long["PairOrdering"] = NA
ratings_dat_discrimin_long["ControlWordContext"] = NA


############################## Loop through, extract cond / speaker ############################################################ 
nrows = length(ratings_dat_discrimin_long$Subject)


for(r in 1:nrows){
  curr_variable = as.character(ratings_dat_discrimin_long$variable[r])
  
  
  ##################### TEST VS. CONTROL #####################
  first_letter = substr(curr_variable, 1, 2)
  if(first_letter == "Te"){
    end_cond = 6
    ratings_dat_discrimin_long$Cond[r] = "Test"
    
  }else if (first_letter == "Ti"){
    ratings_dat_discrimin_long$Cond[r] = "Timing"
    
  }else if (first_letter == "Co"){
    end_cond = 9
    ratings_dat_discrimin_long$Cond[r] = "Control"
    
  }#endif
  
  ##################### GET FULL CONDITION ID  #####################
  curr_cond_id = substr(curr_variable, 1, end_cond)
  ratings_dat_discrimin_long$ConditionID[r] = curr_cond_id
  
  ##################### SPEAKER: LINDA VS. MADISON #####################
  curr_speaker_id = substr(curr_variable, end_cond+2, end_cond+2)
  if(curr_speaker_id == "L"){
    ratings_dat_discrimin_long$Speaker[r] = "Linda"
    
  }else if (curr_speaker_id == "M"){
    ratings_dat_discrimin_long$Speaker[r] = "Madison"
  }#endif
  
  ##################### PAIR ORDERING: W&Y (Control pair first) vs. X/Z (Control Pair second) #####################
  curr_pair_ordering = substr(curr_variable, end_cond, end_cond)
  if(curr_pair_ordering == "W" | curr_pair_ordering == "Y"){
    ratings_dat_discrimin_long$PairOrdering[r] = "TestPairSecond"
  }else if (curr_pair_ordering == "X" | curr_pair_ordering == "Z"){
    ratings_dat_discrimin_long$PairOrdering[r] = "TestPairFirst"
  }#endif
  

  ##################### WORD CONTEXT: 3 (soup) vs. 4 (suit)... only for CONTROL conds #####################
  if (first_letter == "C"){    #only for control conds
    curr_word_context = substr(curr_variable, end_cond-1, end_cond-1)
  
    if(curr_word_context == "3"){
      ratings_dat_discrimin_long$ControlWordContext[r] = "Context_All_Words-Soup"
    }else if (curr_word_context == "4"){
      ratings_dat_discrimin_long$ControlWordContext[r] = "Context_All_Words-Suit"
    }#endif
    
  }#endif
  
}#endfor row loop


# Exclude Condition == "Timing"
ratings_dat_discrimin_long2 = subset(ratings_dat_discrimin_long, (Cond != "Timing") )
filename = sprintf("Processed_discrimination_data_%s.csv", current_experiment_version)
write.csv(ratings_dat_discrimin_long2, filename)



############################## Grade responses ############################################################ 

# Add in correct responses 
compensation_coding = read.csv("compensation_coding_coded.csv", header = TRUE)


# Merge by 'Condition' 
library(dplyr)
ratings_dat_discrimin_long2$Condition = as.factor(ratings_dat_discrimin_long2$Condition)
ratings_dat_discrim_long3 = left_join(ratings_dat_discrimin_long2,compensation_coding, by = "Condition")


# Calculate correct responses (Pair 1  = "First")
nrows = length(ratings_dat_discrim_long3$Subject)
ratings_dat_discrim_long3["Accuracy"] = NA
for(n in 1:nrows){
  curr_resp = as.character(ratings_dat_discrim_long3$value[n])
  curr_c.resp = as.character(ratings_dat_discrim_long3$Correct.Resp[n])
  
  if(is.na(curr_c.resp)== FALSE){
    
    # Get accuracy 
    if((curr_resp == "Pair 1")&(curr_c.resp == "First")){
      ratings_dat_discrim_long3$Accuracy[n] = "1"
    }else if((curr_resp == "Pair 2")&(curr_c.resp == "Second")){
      ratings_dat_discrim_long3$Accuracy[n] = "1"
    }else{
      ratings_dat_discrim_long3$Accuracy[n] = "0"
    }#endif
    
  }#endif is.na
  
}#endfor





